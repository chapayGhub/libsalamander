/*
Copyright 2016 Silent Circle, LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class salamander_SalamanderNative */

#ifndef _Included_salamander_SalamanderNative
#define _Included_salamander_SalamanderNative
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     salamander_SalamanderNative
 * Method:    doInit
 * Signature: (ILjava/lang/String;[B[B[B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_doInit
  (JNIEnv *, jobject, jint, jstring, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    sendMessage
 * Signature: ([B[B[B)[J
 */
JNIEXPORT jlongArray JNICALL Java_salamander_SalamanderNative_sendMessage
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    sendMessageToSiblings
 * Signature: ([B[B[B)[J
 */
JNIEXPORT jlongArray JNICALL Java_salamander_SalamanderNative_sendMessageToSiblings
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getKnownUsers
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_getKnownUsers
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getOwnIdentityKey
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_getOwnIdentityKey
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getIdentityKeys
 * Signature: ([B)[[B
 */
JNIEXPORT jobjectArray JNICALL Java_salamander_SalamanderNative_getIdentityKeys
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getAxoDevicesUser
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_getAxoDevicesUser
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    registerSalamanderDevice
 * Signature: ([I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_registerSalamanderDevice
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    removeSalamanderDevice
 * Signature: ([B[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_removeSalamanderDevice
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    newPreKeys
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_newPreKeys
  (JNIEnv *, jclass, jint);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getNumPreKeys
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_getNumPreKeys
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getErrorCode
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_getErrorCode
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    getErrorInfo
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_salamander_SalamanderNative_getErrorInfo
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    testCommand
 * Signature: (Ljava/lang/String;[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_testCommand
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    axoCommand
 * Signature: (Ljava/lang/String;[B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_salamander_SalamanderNative_axoCommand
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    repoOpenDatabase
 * Signature: (Ljava/lang/String;[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_repoOpenDatabase
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    repoCloseDatabase
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_salamander_SalamanderNative_repoCloseDatabase
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    repoIsOpen
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_salamander_SalamanderNative_repoIsOpen
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    existConversation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_salamander_SalamanderNative_existConversation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    storeConversation
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_storeConversation
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadConversation
 * Signature: ([B[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_loadConversation
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    deleteConversation
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_deleteConversation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    listConversations
 * Signature: ()[[B
 */
JNIEXPORT jobjectArray JNICALL Java_salamander_SalamanderNative_listConversations
  (JNIEnv *, jclass);

/*
 * Class:     salamander_SalamanderNative
 * Method:    insertEvent
 * Signature: ([B[B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_insertEvent
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadEvent
 * Signature: ([B[B[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_loadEvent
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadEventWithMsgId
 * Signature: ([B[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_loadEventWithMsgId
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    existEvent
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_salamander_SalamanderNative_existEvent
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadEvents
 * Signature: ([BII[I)[[B
 */
JNIEXPORT jobjectArray JNICALL Java_salamander_SalamanderNative_loadEvents
  (JNIEnv *, jclass, jbyteArray, jint, jint, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    deleteEvent
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_deleteEvent
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    insertObject
 * Signature: ([B[B[B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_insertObject
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadObject
 * Signature: ([B[B[B[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_loadObject
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    existObject
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_salamander_SalamanderNative_existObject
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadObjects
 * Signature: ([B[B[I)[[B
 */
JNIEXPORT jobjectArray JNICALL Java_salamander_SalamanderNative_loadObjects
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    deleteObject
 * Signature: ([B[B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_deleteObject
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    storeAttachmentStatus
 * Signature: ([B[BI)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_storeAttachmentStatus
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     salamander_SalamanderNative
 * Method:    deleteAttachmentStatus
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_deleteAttachmentStatus
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    deleteWithAttachmentStatus
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_deleteWithAttachmentStatus
  (JNIEnv *, jclass, jint);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadAttachmentStatus
 * Signature: ([B[B[I)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_loadAttachmentStatus
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    loadMsgsIdsWithAttachmentStatus
 * Signature: (I[I)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_salamander_SalamanderNative_loadMsgsIdsWithAttachmentStatus
  (JNIEnv *, jclass, jint, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptNew
 * Signature: ([B[B[B[I)J
 */
JNIEXPORT jlong JNICALL Java_salamander_SalamanderNative_cloudEncryptNew
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudCalculateKey
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_cloudCalculateKey
  (JNIEnv *, jclass, jlong);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptGetKeyBLOB
 * Signature: (J[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudEncryptGetKeyBLOB
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptGetSegmentBLOB
 * Signature: (JI[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudEncryptGetSegmentBLOB
  (JNIEnv *, jclass, jlong, jint, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptGetLocator
 * Signature: (J[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudEncryptGetLocator
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptGetLocatorREST
 * Signature: (J[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudEncryptGetLocatorREST
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudEncryptNext
 * Signature: (J[I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudEncryptNext
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudDecryptNew
 * Signature: ([B[I)J
 */
JNIEXPORT jlong JNICALL Java_salamander_SalamanderNative_cloudDecryptNew
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudDecryptNext
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_salamander_SalamanderNative_cloudDecryptNext
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudGetDecryptedData
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudGetDecryptedData
  (JNIEnv *, jclass, jlong);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudGetDecryptedMetaData
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_salamander_SalamanderNative_cloudGetDecryptedMetaData
  (JNIEnv *, jclass, jlong);

/*
 * Class:     salamander_SalamanderNative
 * Method:    cloudFree
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_salamander_SalamanderNative_cloudFree
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
